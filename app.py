# app.py ‚Äî –ø–æ–ª–æ–∂–∏ –≤ –ö–û–†–ï–ù–¨ –ø—Ä–æ–µ–∫—Ç–∞
import sys, importlib
from pathlib import Path
import streamlit as st

ROOT = Path(__file__).resolve().parent
SRC = ROOT / "src"
sys.path.insert(0, str(SRC))

import rag as rag_mod
try:
    import ingest as ingest_mod
except Exception:
    ingest_mod = None

DATA = ROOT / "data"
PDF = DATA / "pdf"
TXT = DATA / "txt"
CHROMA_DIR = ROOT / "chroma"

st.set_page_config(page_title="Local RAG", page_icon="üí¨", layout="wide")
st.title("Local RAG")
st.caption("–î–æ–∫—É–º–µ–Ω—Ç—ã: data/pdf, data/txt. –≠–º–±–µ–¥–¥–∏–Ω–≥–∏: chroma/. –ü–æ–ª–Ω—ã–π –¥–∏–∞–ª–æ–≥ –∏ —É—Å—Ç–æ–π—á–∏–≤—ã–π –≤–µ–±-fallback.")

# ===== session state =====
if "history" not in st.session_state:
    st.session_state.history = []  # [{role:'user'|'assistant', content:str, sources:list}]

# ===== sidebar: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ + —Ñ–∞–π–ª—ã + –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è =====
with st.sidebar:
    st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
    k_default = int(getattr(rag_mod, "RETRIEVER_K", 5))
    thr_default = float(getattr(rag_mod, "RELEVANCE_THRESHOLD", 0.55))
    web_default = int(getattr(rag_mod, "WEB_MAX_RESULTS", 5))

    k = st.slider("k (—á–∏—Å–ª–æ —á–∞–Ω–∫–æ–≤)", 1, 12, k_default)
    use_thr = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏", value=False)
    threshold = st.slider("–ü–æ—Ä–æ–≥ (–µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω)", 0.0, 1.0, thr_default, step=0.05)
    web_k = st.slider("–ö–æ–ª-–≤–æ –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", 1, 10, web_default)

    st.markdown("---")
    st.subheader("–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã")
    up = st.file_uploader("–ü–µ—Ä–µ—Ç–∞—â–∏ .pdf / .txt / .md", type=["pdf", "txt", "md"], accept_multiple_files=True)
    if up:
        saved = []
        for f in up:
            name = Path(f.name).name
            if name.lower().endswith(".pdf"):
                PDF.mkdir(parents=True, exist_ok=True)
                (PDF / name).write_bytes(f.read())
                saved.append(f"data/pdf/{name}")
            else:
                TXT.mkdir(parents=True, exist_ok=True)
                (TXT / name).write_bytes(f.read())
                saved.append(f"data/txt/{name}")
        st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n" + "\n".join(saved))

    col_a, col_b = st.columns(2)
    with col_a:
        if st.button("üîÅ –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å"):
            if ingest_mod is None:
                st.error("src/ingest.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                try:
                    importlib.reload(ingest_mod)
                    ingest_mod.main()  # —á–∏—Ç–∞–µ—Ç data/*, –ø–∏—à–µ—Ç –≤ chroma/
                    st.success("–ò–Ω–¥–µ–∫—Å –æ–±–Ω–æ–≤–ª—ë–Ω –≤ chroma/")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}")
    with col_b:
        if st.button("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å rag"):
            try:
                importlib.reload(rag_mod)
                st.success("rag.py –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")

    st.markdown("---")
    if st.button("üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥"):
        st.session_state.history = []
        st.success("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")

# ===== —Å—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö/–∏–Ω–¥–µ–∫—Å–∞ =====
if not DATA.exists():
    st.warning("–ü–∞–ø–∫–∞ data/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–π data/pdf –∏ data/txt –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —Å–ª–µ–≤–∞.")
if not CHROMA_DIR.exists() or not (CHROMA_DIR / "chroma.sqlite3").exists():
    st.warning("–ò–Ω–¥–µ–∫—Å Chroma –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏ '–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å' —Å–ª–µ–≤–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤.")

# ===== –≤—ã–≤–æ–¥ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ =====
for msg in st.session_state.history:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])
        if msg.get("sources"):
            with st.expander("–ò—Å—Ç–æ—á–Ω–∏–∫–∏", expanded=False):
                for s in msg["sources"]:
                    st.write(("üóÇ " if s["type"] == "local" else "üåê ") + s["label"])

# ===== –≤–≤–æ–¥ –∏ –æ—Ç–≤–µ—Ç =====
q = st.chat_input("–í–æ–ø—Ä–æ—Å")
if q:
    # 1) –¥–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    st.session_state.history.append({"role": "user", "content": q})

    # 2) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞
    with st.chat_message("user"):
        st.markdown(q)

    # 3) —Å—á–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
    with st.chat_message("assistant"):
        with st.spinner("–î—É–º–∞—é..."):
            try:
                importlib.reload(rag_mod)  # –ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–≤–µ–∂–∏–µ –ø—Ä–∞–≤–∫–∏ rag.py
                text, src_kind, cites = rag_mod.answer(
                    question=q,
                    persist_dir=CHROMA_DIR,
                    k=k,
                    use_threshold=use_thr,
                    threshold=threshold,
                    web_k=web_k
                )
            except Exception as e:
                text, src_kind, cites = f"–û—à–∏–±–∫–∞: {e}", "none", []

        # 4) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        st.markdown(text)
        if cites:
            label = {"local": "–õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", "web": "–í–µ–±", "none": "–ù–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"}.get(src_kind, "–ò—Å—Ç–æ—á–Ω–∏–∫–∏")
            with st.expander(f"–ò—Å—Ç–æ—á–Ω–∏–∫–∏ ‚Ä¢ {label}", expanded=False):
                for s in cites:
                    st.write(("üóÇ " if s["type"] == "local" else "üåê ") + s["label"])

    # 5) –¥–æ–±–∞–≤–ª—è–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é (–≤–∞–∂–Ω–æ: –ü–û–°–õ–ï –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–æ –≤ —Ç—É –∂–µ —Å–µ—Å—Å–∏—é)
    st.session_state.history.append({"role": "assistant", "content": text, "sources": cites})
